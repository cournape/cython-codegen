"""\
xml2cython: process xml files generated by gccxml and generate cython code

Usage:
    xml2cython header xmlfile

By default, xml2cython pull out every function available in the xmlfile."""
import getopt
import sys

from tp_puller import TypePuller
from cython_gen import cy_generate
from misc import classify, query_items

def generate(output, genitems, enumvals):
    # Generate the cython code
    cython_code = [cy_generate(i) for i in genitems]

    output.write("\tcdef enum:\n")
    for i in enumvals:
        output.write("\t\t%s = %d\n" % (i.name, int(i.value)))
    for i in cython_code:
        if not i:
            continue
        if len(i) > 1:
            output.write("\t%s\n" % i[0])
            for j in i[1:]:
                output.write("\t%s\n" % j)
        else:
            output.write("\t%s\n" % i[0])

def generate_main(header, xml, output):
    items, named, locations = query_items(xml)

    output.write("cdef extern from '%s':\n" % header)

    funcs, tpdefs, enumvals, enums, structs, vars, unions = \
            classify(items, locations)

    puller = TypePuller(items)
    for f in funcs.values():
        puller.pull(f)

    needed = puller.values()

    # Order 'anonymous' enum values alphabetically
    def cmpenum(a, b):
        return cmp(a.name, b.name)
    anoenumvals = enumvals.values()
    anoenumvals.sort(cmpenum)

    # List of items to generate code for
    gen = list(needed) + funcs.values()
    generate(output, gen, anoenumvals)

class Usage(Exception):
    def __init__(self, msg):
        self.msg = """\
usage: xml2cython [options] headerfile xmlfile

%s""" % msg

def main(argv=None):
    if argv is None:
        argv = sys.argv

    # parse command line options
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "ho:", ["help", "output"])
            if len(args) != 2:
                raise Usage("Error, exactly one input file must be specified")
            header_input = args[0]
            xml_input = args[1]
        except getopt.error, msg:
            raise Usage(msg)
    except Usage, e:
        print >>sys.stderr, e.msg
        print >>sys.stderr, "for help use --help"
        return 2

    # process options
    output = None
    for o, a in opts:
        if o in ("-h", "--help"):
            print __doc__
            return 0
        elif o in ("-o", "--output"):
            output = a

    #if output is None:
    #    out = sys.stdout
    #else:
    #    out = open(output, 'w')
    from cStringIO import StringIO
    out = StringIO()

    #print "Parsing file", xml_input
    #print "Using header", header_input
    #print "Outputing to", out
    try:
        generate_main(header_input, xml_input, out)
        if output:
            f = open(output, 'w')
            try:
                f.write(out.getvalue())
            finally:
                f.close()
        else:
            print out.getvalue()
    finally:
        out.close()

if __name__ == '__main__':
    sys.exit(main())
